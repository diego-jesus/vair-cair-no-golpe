import { GameMessage } from "../data/messages";

// Utility functions for game mechanics

export const calculateTimeForRound = (round: number): number => {
  // Start with 30 seconds, decrease by 2.5 seconds every 2 rounds
  // Minimum of 10 seconds
  const baseTime = 30;
  const reduction = Math.floor((round - 1) / 2) * 2.5;
  return Math.max(10, baseTime - reduction);
};

export const formatScore = (score: number): string => {
  return score.toLocaleString('pt-BR');
};

export const getConfidenceLevelByAccuracy = (accuracy: number) => {
  if (accuracy >= 90) return {
    level: "Ca√ßa-Golpes Master",
    emoji: "üèÜ",
    color: "text-yellow-600",
    description: "Voc√™ √© praticamente imune a golpes digitais!"
  };
  
  if (accuracy >= 80) return {
    level: "Especialista Digital",
    emoji: "üõ°Ô∏è",
    color: "text-green-600",
    description: "Voc√™ tem √≥tima percep√ß√£o para identificar golpes!"
  };
  
  if (accuracy >= 70) return {
    level: "Navegador Experiente",
    emoji: "üéØ",
    color: "text-blue-600",
    description: "Bom trabalho! Continue praticando para ficar ainda melhor!"
  };
  
  if (accuracy >= 60) return {
    level: "Usu√°rio Consciente",
    emoji: "üëç",
    color: "text-purple-600",
    description: "No caminho certo! Com mais pr√°tica voc√™ ser√° um expert!"
  };
  
  if (accuracy >= 50) return {
    level: "Aprendiz Cauteloso",
    emoji: "ü§î",
    color: "text-orange-600",
    description: "Voc√™ est√° aprendendo! Continue jogando para melhorar!"
  };
  
  return {
    level: "Precisa Treinar Mais",
    emoji: "üìö",
    color: "text-red-600",
    description: "N√£o desista! A pr√°tica leva √† perfei√ß√£o na seguran√ßa digital!"
  };
};

export const getRandomImpactPhrase = (isCorrect: boolean): string => {
  const correctPhrases = [
    "Mandou bem! üéØ",
    "Ca√ßa-golpes no peda√ßo! üïµÔ∏è",
    "Voc√™ n√£o cai nessa! üí™",
    "Esperto demais! üß†",
    "Top demais! üî•",
    "Sacou na hora! üëè",
    "Expert em seguran√ßa! üîí"
  ];
  
  const incorrectPhrases = [
    "Vacilou, perdeu o FGTS! üí∏",
    "Caiu na l√°bia do golpista! üòÖ",
    "Quase caiu no golpe do Zap! üì±",
    "Opa! Cuidado a√≠! ‚ö†Ô∏è",
    "Golpe detectado tarde demais! üö®",
    "Essa pegou voc√™! üò¨",
    "Golpista: 1 x Voc√™: 0 üòµ"
  ];
  
  const phrases = isCorrect ? correctPhrases : incorrectPhrases;
  return phrases[Math.floor(Math.random() * phrases.length)];
};

export const getGameModeDescription = (mode: string): string => {
  switch (mode) {
    case 'classico':
      return 'Mensagens variadas de golpes comuns do dia a dia';
    case 'tiozao':
      return 'Estilo WhatsApp com erros de portugu√™s e muito emoji';
    case 'empresa':
      return 'Focado em fraudes corporativas e phishing empresarial';
    case 'aprendiz':
      return 'Modo com dicas para quem est√° come√ßando a aprender';
    default:
      return 'Modo de jogo personalizado';
  }
};

export const validateMessage = (message: GameMessage): boolean => {
  return !!(
    message.id &&
    message.texto &&
    message.resposta &&
    message.categoria &&
    message.tipo &&
    message.explicacao &&
    message.modos &&
    message.modos.length > 0
  );
};

export const getScoreColor = (score: number): string => {
  if (score >= 1000) return 'text-green-600';
  if (score >= 500) return 'text-blue-600';
  if (score >= 0) return 'text-gray-600';
  return 'text-red-600';
};

export const shouldShowComboAnimation = (combo: number): boolean => {
  return combo > 0 && combo % 3 === 0;
};

// Fun√ß√£o para detectar se √© um dispositivo m√≥vel
export const isMobileDevice = (): boolean => {
  return window.innerWidth <= 768;
};

// Fun√ß√£o para vibrar o dispositivo (se suportado)
export const vibrateDevice = (pattern: number | number[] = 100): void => {
  if ('vibrate' in navigator) {
    navigator.vibrate(pattern);
  }
};

// Fun√ß√£o para copiar texto para clipboard
export const copyToClipboard = async (text: string): Promise<boolean> => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (err) {
    console.error('Erro ao copiar para clipboard:', err);
    return false;
  }
};
